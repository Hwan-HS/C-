using System;
using System.Runtime.CompilerServices;


class Partial
{

static void Main(string[] args)
{
Console.WriteLine("31. 부분 클래스(partial 키워드)");
Console.WriteLine("CS 파일 여러 개로 클래스를 분할하고, 컴파일할 때는 클래스 하나로 컴파일하도록 하는 기능");
Console.WriteLine("이름이 같은 클래스를 가질 수 있다.");
}
}


//31-1 부분 클래스를 사용하여 다른 파일에서 멤버를 따로 관리하기

//CS 파일 3개



//FirstDeveloper.cs
namespace FirstDeveloper
{
    public partial class Hello
    {
        public void Hi() => Console.WriteLine("FirstDeveloper.cs");
    }
}

//SecondDeveloper.cs
namespace FirstDeveloper
{
    public partial class Hello
    {
        public void Bye() => Console.WriteLine("SecondDeveloper.cs");
    }
}

//PartialClassDemo.cs
namespace PartialClassDemo
{
    class PartialClassDemo
    {
        static void Main(string[] args)
        {
            Hello hello = new Hello(); //인스턴스 생성
            hello.Hi();
            hello.Bye();
        }
    }
}


//31-2 부분 클래스를 사용하여 속성과 메서드 멤버를 나누어서 관리하기

namespace PartialClass
{
    public partial class Person //속성 클래스
    {
        public string Name { get; set; }
        public int Age { get; set; }
    }

    public partial class Person //partial 키워드라 같은 이름 클래스 가능
    {
        public void Print() //속성을 출력해주는 메서드
        {
            Console.WriteLine($"{this.Name}의 나이는 {this.Age}입니다.");
        }
    }

    class PartialClass
    {
        static void Main(string[] args)
        {
            Person person = new Person(); //개체 생성
            person.Name = "; _ ;";
            person.Age = 7;

            person.Print(); //; _ ;의 나이는 7입니다.
        }
    }

}


//31-3 정적 클래스(static class)
//클래스 이름 앞에 static 키워드가 붙는 클래스
static class 정적클래스 { }
// - static 키워드를 붙임
// - static 멤버만 가짐
// - 인스턴스화 될 수 없음
// - 유틸리티 클래스 용도로 사용 (Math 같은)
// - 팩터리 클래스




//31-4 필드에 public을 붙여 외부 클래스에 공개하기

class Point
{
    //왠만하면 private를 권장함 (겹침 발생?)

    public int x; //필드 x
    public int y; //필드 y

    public Point(int x, int y) //매개변수가 있는 생성자
    {
        this.x = x;
        this.y = y;
    }

    public void MoveBy(int px, int py) //메서드
    {
        this.x += px;
        this.y += py;
    }

}

class MainClass
{
    static void Main(string[] args)
    {
        Point point = new Point(0, 0);
        point.MoveBy(10, 20);
        Console.WriteLine($"X: {point.x}, Y: {point.y}"); //X: 10, Y: 20
        point.MoveBy(200, 100);
        Console.WriteLine($"X: {point.x}, Y: {point.y}"); //X: 210, Y: 120
    }
}


//31-5 함수형 프로그래밍 스타일: 메서드 체이닝
//메서드의 반환값을 자신의 클래스 형식으로 지정하면 메서드를 계속 반복해서 호출하는 함수형 프로그래밍 스타일을 제공


class Point
{
    public readonly int x;
    public readonly int y;
    public Point(int x, int y) //생성자
    {
        this.x = x; //readonly 필드는 반드시 생성자로 초기화 필요함
        this.y = y;
    }

    public Point MoveBy(int dx, int dy)
    {
        return new Point(this.x + dx, this.y + dy);
    }
}

class MainClass
{
    static void Main(string[] args)
    {
        Point p = new Point(0, 0).MoveBy(20, 20).MoveBy(10, 5).MoveBy(100, 500);
        Console.WriteLine($"X: {p.x}, Y: {p.y}"); //X: 130, Y: 525
    }
}


//31-6 불변 형식(immutable)
//불변 형식은 개체가 만들어지고 값이 변경되지 않음을 의미

public class Circle
{
    public int Radius { get; private set; } //읽기 전용 속성
    public Circle(int radius) //생성자 - 매개변수로 Radius 초기화
    {
        Radius = radius;
    }
    public Circle MakeNew(int radius)
    {
        return new Circle(radius);
    }
}

class MainClass
{

    static void Main(string[] args)
    {
        Circle circle = new Circle(10);
        Console.WriteLine($"Radius : {circle.Radius} - {circle.GetHashCode()}"); //Radius : 10 - 54267293

        circle = new Circle(20);
        Console.WriteLine($"Radius : {circle.Radius} - {circle.GetHashCode()}"); //Radius : 20 - 18643596
    }
}


